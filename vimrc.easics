" TABS ARE 8 SPACES, NO DISCUSSION POSSIBLE
set tabstop=8

" Default colorscheme (can be overwritten in vimrc.local)
colorscheme murphy

""" Mappings
"" All modes
" To previous buffer
nnoremap <F1> :bp
" To next buffer
nnoremap <F2> :bn
" To alternate buffer
nnoremap <F3> :b#
" Go to previous tab in vim
nmap <S-F1> :tabp<CR>
" Go to next tab in vim
nmap <S-F2> :tabn<CR>
" Open alternate buffer in a horizontal split, on the right
nnoremap <S-F3> :execute "rightbelow vsplit " . bufname("#")
" Set current directory for current window
nnoremap <F4> :lcd %:p:h<CR>
" Replace tabs by blanks, trailing spaces by nothing
nmap <S-F4> :retab<CR>g/./s/ \+$//<CR>
" Display the next error in the list
nnoremap <F5> :cnext
nnoremap <F6> :cprevious
" In a long file: force syntax highlighting when in middle of file
nmap <S-F5> syntax sync fromstart
" Alternate file
nnoremap <F8> :A
" Create ifndef for header files
nnoremap <F10> :call CreateHeaderIfndef()
" Make class definition
nnoremap <F11> :call MakeClassDefinition()
" Make QT class definition
nnoremap <S-F11> :call MakeClassDefinitionQT()
" Make system c class definition
nnoremap <C-F11> :call MakeClassDefinitionSystemC()
" Git select
nnoremap ,g :call GitSelect()<CR>
" Alt+l is l
nnoremap <M-l> l
" Alt+h is h
nnoremap <M-h> h
" Git select
nnoremap <Leader>gs :call GitSelect()<CR>
" Select word under cursor
nnoremap <space> viw

"" Normal mode
" Diff both windows
nnoremap <Leader>d2 :diffthis<cr><c-w><c-w>:diffthis<cr>
" Remove diff
nnoremap <Leader>r2 :diffoff!<cr>

"" Insert mode
" Let hjkl work in insertmode with ctrl
" Move down
inoremap <C-J> <down>
" Move up
inoremap <C-K> <up>
" Move right
inoremap <C-L> <right>
" Move left
inoremap <C-H> <left>
" Move to end
inoremap <C-E> <end>
" Help = escape
inoremap <Help> <ESC>

"" Operator mode (movements in commands, e.g. d <move> or c <move> or y <move>
"" Vim wil operate on visually selected text
"" or text between previous and current position
" Inside next parentheses on current line
onoremap in( :<c-u>normal! f(vi(<cr>
" Inside last parentheses on current line
onoremap il( :<c-u>normal! F)vi(<cr>
" Around next parentheses on current line
onoremap an( :<c-u>normal! f(va(<cr>
" Around last parentheses on current line
onoremap al( :<c-u>normal! F)va(<cr>

"" Command line
" Valid names for keys are:  <Up> <Down> <Left> <Right> <Home> <End>
" <S-Left> <S-Right> <S-Up> <PageUp> <S-Down> <PageDown>  <LeftMouse>
cnoremap <C-A> <Home>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <C-E> <End>
cnoremap <ESC>b <S-Left>
cnoremap <ESC>f <S-Right>
cnoremap <ESC><C-H> <C-W>

""" Autocommands
"" Filetype settings for autocommands
filetype on
filetype indent on
filetype plugin on

"" When opening a buffer
augroup opening_buffer
  autocmd!
  " Jump to last known cursor position when reopening
  au BufReadPost * if line("'\"") | exe "normal '\"" | endif
augroup end

"" Setting the filetype
augroup setting_filetype
  autocmd!
  au BufRead,BufNewFile *.C setfiletype cpp
  au BufRead,BufNewFile *.cpp setfiletype cpp
  au BufRead,BufNewFile *.cc setfiletype cpp
  au BufRead,BufNewFile *.ari setfiletype ari
  au BufRead,BufNewFile *.psl setfiletype psl
  au BufRead,BufNewFile *.pslm setfiletype pslm
  au BufRead,BufNewFile *.pslt setfiletype pslt
  au BufRead,BufNewFile *.vci setfiletype vci
  au BufRead,BufNewFile *.vh setfiletype verilog
  au BufRead,BufNewFile *.vhdx setfiletype vhdl
  au BufRead,BufNewFile *.adoc setfiletype asciidoc
  au BufRead,BufNewFile *.vhd setlocal suffixesadd=_ent.vhd,_rtl.vhd,.vhd
  au BufRead,BufNewFile *.ari setlocal suffixesadd=_ent.vhd,_rtl.vhd,.vhd
augroup end

"" For vhdl file
augroup vhdl_files
  autocmd!
  " Comment out current line
  autocmd FileType vhdl nnoremap <LocalLeader>c 0i--<esc>
  " Set format of error message
  autocmd FileType vhdl setlocal errorformat=**\ %trror:\ %f(%l):\ %m,**\ %tarning\[%*[0-9]\]:\ %m
  " Jump up one level of vhdl
  autocmd FileType vhdl nnoremap <C-Up> :call JumpUpOneLevelVhdl()<CR>
  " Folding is specified with markers
  autocmd FileType vhdl set foldmethod=marker
  " Fold start and end markers
  autocmd FileType vhdl setlocal foldmarker=--**,--*
augroup end

"" For verilog file
augroup verilog_files
  autocmd!
  " Indentation according to smart indenting rules
  autocmd FileType verilog    setlocal smartindent
  " Use a shift width of 2
  autocmd FileType verilog    setlocal sw=2
  " Comment out current line
  autocmd FileType verilog nnoremap <LocalLeader>c 0i//<esc>
  " Folding is specified with markers
  autocmd FileType verilog set foldmethod=marker
  " Fold start and end markers
  autocmd FileType verilog setlocal foldmarker=//**,//*
augroup end
" Set cindent options:
" first opening brace on 0, opening { at 1 shift,
" align with opened ( with no indent, normal indent is 2 shifts, 1 shift less
" when no { in if etc, 1 shift less when inside { that started at 0,
" when brace at end of line 1 shift less
autocmd FileType verilog    setlocal cino=f0,{1s,(0,>2s,n-s,^-s,e-s

"" For c file
augroup FileTypeC
  autocmd FileType c setlocal cindent
  autocmd FileType c setlocal cino=f0,{1s,N-2s,(0,>2s,n-s,^-s,e-s
augroup end

autocmd FileType cpp set suffixesadd=.h,.C,.cpp,.cc,.hh,.hpp,.c
au BufRead,BufNewFile *.ari setlocal suffixesadd=_ent.vhd,_rtl.vhd,.vhd

"" For ariadne file
augroup ariadne_files
  autocmd!
  " Adding ariadne magic
  autocmd FileType ari nnoremap <F7> :call AddMagicAri()
augroup end

"" For ruby file
augroup ruby_files
  autocmd!
  " Comment out current line
  autocmd FileType ruby nnoremap <LocalLeader>c 0i#<esc>
augroup end

"" For python file
augroup python_files
  autocmd!
  " Indentation according to smart indenting rules
  autocmd FileType python     setlocal smartindent
  " Use a shift width of 4 (no braces so 2 shift levels)
  autocmd FileType python     setlocal sw=4
  " Comment out current line
  autocmd FileType python nnoremap <LocalLeader>c 0i#<esc>
  " Code snippet for if
  autocmd FileType python :iabbrev <buffer> iff if:<left>
augroup end

"" For make file
augroup make_files
  autocmd!
  " Set no expand tab
  autocmd FileType make setlocal noet
augroup end

"" For lex file
augroup lex_files
  autocmd!
  " Indentation according to smart indenting rules
  autocmd FileType lex set smartindent
augroup end

"" For yacc file
augroup yacc_files
  autocmd!
  " Indentation according to smart indenting rules
  autocmd FileType yacc set smartindent
augroup end

"" Tex file
augroup tex_files
  autocmd!
  " Compiler of tex file is tex
  autocmd FileType tex compiler tex
augroup end

"" For perl file
augroup perl_files
  autocmd!
  " Indentation according to C indenting rules
  autocmd FileType perl       setlocal cindent
  " Use a shift width of 2
  autocmd FileType perl       setlocal sw=2
augroup end
" Set cindent options:
" first opening brace on 0, opening { at 1 shift, no indent for namespace,
" align with opened ( with no indent, normal indent is 2 shifts, 1 shift less
" when no { in if etc, 1 shift less when inside { that started at 0,
" when brace at end of line 1 shift less
autocmd FileType perl       setlocal cino=f0,{1s,N-2s,(0,>2s,n-s,^-s,e-s

"" For xpm file
augroup xpm_files
  autocmd!
  " No wrapping at 80 characters
  autocmd FileType xpm set nowrap
augroup end

"" For vimscript file   {{{
augroup vim_files
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup end
" }}}

"" Fugitives
augroup fugitives
  autocmd!
  " Auto-delete fugitive buffers
  autocmd BufReadPost fugitive://* set bufhidden=delete
  " Go to parent commit on git objects (.. is the key sequence)
  autocmd User fugitive
        \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
        \   nnoremap <buffer> .. :edit %:h<CR> |
        \ endif
augroup end

" Vim -b : edit binary using xxd-format!
augroup Binary
  au!
  au BufReadPre  *.bin let &bin=1
  au BufReadPost *.bin if &bin | %!xxd
  au BufReadPost *.bin set ft=xxd | endif
  au BufWritePre *.bin if &bin | %!xxd -r
  au BufWritePre *.bin endif
  au BufWritePost *.bin if &bin | %!xxd
  au BufWritePost *.bin set nomod | endif
augroup END


""" Set tags
" Defines pathname of files containing tags
function! SetVTags()
  if $DESIGN_WORK_DIR != "" |
    set tags=$DESIGN_WORK_DIR/vtags |
  else |
    set tags=./vtags |
  endif
endfunction

augroup tags_setting
  au!
  au BufRead,BufNewFile *.vhd :call SetVTags()
  au BufRead,BufNewFile *.vhdl :call SetVTags()
  au BufRead,BufNewFile *.[chC] set tags=$DESIGN_WORK_DIR/ctags
augroup end

"" -- ctags --
" map <ctrl>+F12 to generate ctags for current folder:
noremap <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
      \ :!cscope -R -b <CR> :cs reset <CR><CR>
" add current directory's generated tags file to available tags
set tags+=./tags


""" Highlighting
" Popup menu selected item: dark blue
hi PmenuSel ctermbg=1
" Popup menu scroll bar: dark red
hi PmenuSbar ctermbg=4
" Color column colors
highlight ColorColumn ctermbg=235 guibg=#2c2d27


